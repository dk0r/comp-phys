//============================================================================
// Name        : HW_3.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

//
// Initial conditions: x(0)=0.5 , y(0)=0 , V_x(0)=0 , V_y(0)=1.63 and h=0.1
//
#include <iostream>
#include <fstream>
#include <cmath>
#include <nr3.h>
#include <rk4.h>

using namespace std;


//Physical Constants
double G = 6.67398e-11,
       M = 1.9891e30;

ofstream of;

void derivs(const Doub x, VecDoub_I & y, VecDoub_O & dydx)
{
	dydx[0] = y[1];
	dydx[1] =  (-G*M) *  y[0] / pow( y[0]*y[0] + y[2]*y[2] , 1.5);
	dydx[2] = y[3];
	dydx[3] = (-G*M) *  y[2] / pow( y[0]*y[0] + y[2]*y[2] , 1.5);
}



int main (int argc, char * const argv[])
{
	VecDoub y(4),dydx(4); //
	Doub x, xmin, kmax=100000, h=0.1;

	VecDoub yout(4);
	int k;

	xmin = 0;

	y[0] = 0.5;
	y[1] = 0;
	y[2] = 0;
	y[3] = 1.63;

	derivs(xmin, y, dydx);

	for(k=0; k < kmax; k++)
	{
		x=xmin+k*h;
		rk4(y, dydx,  x, h, yout, derivs);

		cout << "k = " << k << "    f(x+h) = " << yout[0] << "    f'(x+h) = " << yout[1] << endl;

		y[0] = yout[0];
		y[1] = yout[2];

		derivs(x,y,dydx);
	}
}

/*

//Last Working w/ NumericalMethodsGuy

void derivs(const Doub x, VecDoub_I & y, VecDoub_O & dydx)
{
	dydx[0]= y[1];
	dydx[1]= ( 11*exp((-1)*x) - 3*y[1] - 5*y[0] ) / 2;

}




int main (int argc, char * const argv[])
{
	VecDoub y(2),dydx(2);
	Doub x, xmin, xmax, kmax=1000, h=0.25;

	VecDoub yout(2);
	int k;

	xmin=0;
	//xmax=2; //appears to do nothing

	y[0]=7;
	y[1]=13;

	derivs(xmin,y,dydx);

	ofi.open("test.csv");
	ofi << "f(x+h),f'(x+h)" << endl;

	for(k=0;k<kmax;k++)
	{
		x=xmin+k*h;
		rk4(y, dydx,  x, h, yout, derivs);
		cout << "k = " << k << "    f(x+h) = " << yout[0] << "    f'(x+h) = " << yout[1] << endl;
		ofi << yout[0] << "," << yout[1] << endl;
		y[0]=yout[0];
		y[1]=yout[1];
		derivs(x,y,dydx);
	}

}

*/

