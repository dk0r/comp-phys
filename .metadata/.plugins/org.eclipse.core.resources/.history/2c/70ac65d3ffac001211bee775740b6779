#include <iostream>
#include <fstream>
#include <cmath>
#include "nr3.h"
#include "gaussj.h"

using namespace std;


int m = 3;
int n = 2;

int M = (m+2);
int N = (n+2);

int r = 1; //resistance (ohms) of all resistors

int resistanceMatrix()
{

  int reference[M][N];
  int refCount;


  //initializes reference matrix;
  for(int i=0; i<M; i++)
  {
	 for(int j=0; j<N; j++)
	 {
	  reference[i][j] = 0;
	  cout << "reference[" << i << "][" << j << "]=" << reference[i][j] << endl;
	 }
  }



  //fills bottom loop of reference matrix w/ 1's;
  for(int j=1; j<(N-1); j++)
  {
	reference[M-2][j] = 1;
  }


  refCount = 2;

  for(int j=0; j<N; j++)
  {
	for(int i=(M-1); i>0; i--)
	{
	 reference[i][j] = refCount;
	 refCount++;
	}
  }

	//data output
  	  ofstream of;
	  of.open("reference.csv" );
      //int elements = 0;

			for(int i=0; i<M ;i++)
			 {
				 for(int j=0; j<N ;j++)
				 {
					 elements++;

					 if((j+1)%N == 0)
					 {
						 of << reference[i][j] << "\n";
					 }

					 if((j+!)%N != 0)
					 {
						 of << reference[i][j] <<",";
					 }
				 }
			 }

			//make_filename( "body", ".txt" ).c_str()

			 of << "\n" << "\n";
			 of.close();











  return 0;
}


int gaussJordan()
{

  MatDoub_IO R(m,n);
  MatDoub_IO v(m,1);

  //Define LHS
  //first row
  R[0][0]=1;
  R[0][1]=0;
  R[0][2]=4;

  //second row
  R[1][0]=0;
  R[1][1]=2;
  R[1][2]=4;

  //third row
  R[2][0]=1;
  R[2][1]=1;
  R[2][2]=-1;

  //Define RHS
  v[0][0]=1;
  v[1][0]=2;
  v[2][0]=0;

  //perform Gauss-Jordan
  gaussj(R,v);

  cout << "Solution is: \n";
  for (int i=0;i<3;i++)
  {
    cout << i << ":\t" << v[i][0]<<endl;
  }

  cout<<"Finished"<<endl;

  return 0;
}

int main()
{
	resistanceMatrix();
	//gaussJordan();
	return 0;
}
