
#include <iostream>
#include <fstream>
#include <cmath>
#include <nr3.h>
#include <rk4.h>

using namespace std;


//////Physical Constants////

///Gravitational Constants
double Gsi  = 6.67428e-11;   // (SI-units:  m^3 / kg*s^2)
double Gastro = 1.48818071e-34; // (Astro-units: au^3/days^2)

//Celestial Mass  (SI-units: kg)
double Msun =    1.9891e30;
double Mmer =    0.3302e24;
double Mven =    4.8685e24;
double Mear =    5.9736e24;
double Mmar =    0.64185e24;
double Mjup = 1898.6e24;
double Msat =  568.46e24;
double Mura =   86.832e24;
double Mnep =  102.43e24;

//Gravitational Constants (Astro-units: au^3/days^2)
double GMsun = 2.96014025e-4;
double GMmer = Gastro*Mmer;
double GMven = Gastro*Mven;
double GMear = 8.88979629e-10;
double GMmar = Gastro*Mmar;
double GMjup = 2.82545990e-7; //2.82545990e-7;
double GMsat = Gastro*Msat;
double GMura = Gastro*Mura;
double GMnep = Gastro*Mnep;


/*
void derivs(const Doub x, VecDoub_I & y, VecDoub_O & dydx)
{
	///Earth

	//X-components
	dydx[0] = y[1];
	dydx[1] = (-GMsun * y[0]) / pow( (y[0]*y[0] + y[2]*y[2]) , 1.5 )
			+ (-GMjup * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
	//Y-components
	dydx[2] = y[3];
	dydx[3] = (-GMsun * y[2]) / pow( (y[0]*y[0] + y[2]*y[2]) , 1.5 )
			+ (-GMjup * y[2]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );


	///Jupiter

	//X-components
	dydx[4] = y[5];
	dydx[5] =   (-GMsun * y[4]) / pow( (y[4]*y[4] + y[6]*y[6]) , 1.5 )
			  + (-GMear * y[4]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
	//Y-components
	dydx[6] = y[7];
	dydx[7] =   (-GMsun * y[6]) / pow( (y[4]*y[4] + y[6]*y[6]) , 1.5 )
			  + (-GMear * y[6]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
}

int sej()
{
	//cout << "GMs =" << GMs << ",  G_astro*M_s = " << G_astro*M_s << endl;
	//cout << "GMe =" << GMe << ",  G_astro*M_e = " << G_astro*M_e << endl;
	//cout << "GMj =" << GMj << ",  G_astro*M_j = " << G_astro*M_j << endl;

	VecDoub y(8);
	VecDoub dydx(8); //vector of positions & velocities for earth and
	VecDoub yout(8);

	double x;
	double xmin;      //minimum starting position (units: au)
	double kmax=365*12;  //max iterations (units: days)
	double h=1;       //time step size (units: days)

	xmin = 0;

	///Initial Conditions:

	//Earth
	y[0] = 0.98329;       //X-Position          (units: au)
	y[1] = 0;                      //X-Velocity (units: au/day)
	y[2] = 0;             //Y- Position         (units: au)
	y[3] = 1.74939488e-2; 		   //Y-Velocity (units: au/day)

	//Jupiter
	y[4] = 4.950429;      //X-Position          (units: au)
	y[5] = 0;                      //X-Velocity (units: au/day)
	y[6] = 0;             //Y- Position         (units: au)
	y[7] = 7.92396305e-3; 		   //Y-Velocity (units: au/day)  !!!!!!!! e-6 original


	derivs(xmin, y, dydx);

	//file output streams
	ofstream ofAllData, ofPositionEarth, ofPositionJupiter;
	ofAllData.open("all-data.csv");
	ofPositionEarth.open("x-y-positionEarth.csv");
	ofPositionJupiter.open("x-y-positionJupiter.csv");


	for(int k=0; k < kmax; k++)
	{
			x=xmin+k*h;

			rk4(y, dydx,  x, h, yout, derivs);

			//display output
			cout << "k = " << k
				 << "    Xe = " << yout[0] << "    X'e= " << yout[1]
				 << "    Ye = " << yout[2] << "    Y'e= " << yout[3] << endl

				 << "    Xj = " << yout[4] << "    X'j= " << yout[5]
				 << "    Yj = " << yout[6] << "    Y'j= " << yout[7] << endl << endl;

			//file output streams
			ofAllData << yout[0] << "," << yout[1] << "," << yout[2] << "," << yout[3] << yout[4] << "," << yout[5] << "," << yout[6] << ","  << yout[7] << endl;
			ofPositionEarth << yout[0] << "," << yout[2] << endl;
			ofPositionJupiter << yout[4] << "," << yout[6] << endl;

			y = yout;

			derivs(x,y,dydx);
	}

	//closes file output streams
	ofAllData.close();
	ofPositionEarth.close();
	ofPositionJupiter.close();

return 0;

}

void mercDerivs(const Doub x, VecDoub_I & y, VecDoub_O & dydx)
{
	///Mercury

	///Venus

	///Earth

		//X-components
		dydx[0] = y[1];
		dydx[1] = (-GMsun * y[0]) / pow( (y[0]*y[0] + y[2]*y[2]) , 1.5 )
				+ (-GMmer * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
				+ (-GMven * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
				+ (-GMmar * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
				+ (-GMjup * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
				+ (-GMsat * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
				+ (-GMurn * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
				+ (-GMnep * y[0]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );

				//Y-components
		dydx[2] = y[3];
		dydx[3] = (-GMsun * y[2]) / pow( (y[0]*y[0] + y[2]*y[2]) , 1.5 )
				+ (-GMjup * y[2]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );


	///Jupiter

		//X-components
		dydx[4] = y[5];
		dydx[5] =   (-GMs * y[4]) / pow( (y[4]*y[4] + y[6]*y[6]) , 1.5 )
				  + (-GMe * y[4]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );
		//Y-components
		dydx[6] = y[7];
		dydx[7] =   (-GMs * y[6]) / pow( (y[4]*y[4] + y[6]*y[6]) , 1.5 )
				  + (-GMe * y[6]) / pow( (y[0]-y[4])*(y[0]-y[4]) + (y[2]-y[6])*(y[2]-y[6]) , 1.5 );


	///Mars
	///Jupiter
	///Saturn
	///Uranus
	///Neptune
}


int sm()
{
		VecDoub y(36);
		VecDoub dydx(36); //vector of positions & velocities for earth and
		VecDoub yout(36);


		double x;
		double xmin = 0;       //minimum starting position (units: au)
		double kmax = 50*87.969;  //max iterations (units: days)
		double h = 1;          //time step size (units: days)


		///Initial Conditions:

		//Mercury
		y[0] = 0.307491008;   //X-Position          (units: au)
		y[1] = 0;                      //X-Velocity (units: au/day)
		y[2] = 0;             //Y- Position         (units: au)
		y[3] = 0.0340638003; 		   //Y-Velocity (units: au/day)

		mercDerivs(xmin, y, dydx);

			//file output stream
			ofstream ofPositionMercury;
			ofPositionMercury.open("x-y-positionMercury.csv");


		for(int k=0; k < kmax; k++)
			{
					x=xmin+k*h;

					rk4(y, dydx,  x, h, yout, mercDerivs);

					//display output
					cout << "k = " << k
						 << "    Xm = " << yout[0] << "    X'm= " << yout[1]
						 << "    Ym = " << yout[2] << "    Y'm= " << yout[3] << endl;

					//file output stream
					ofPositionMercury << yout[0] << "," << yout[2] << endl;

					y = yout;

					mercDerivs(x,y,dydx);
			}

			//closes file output stream
			ofPositionMercury.close();

	return 0;
}

*/

int main()
{
	cout << "GMsun="<<GMsun << endl;
	cout << "Gastro*Msun=" << Gastro*Msun << endl;

	cout << "GMear="<<GMear << endl;
		cout << "Gastro*Mear=" << Gastro*Mear << endl;

	//sej();
	//sm();
	return 0;
}






//working sun and mercury. no deviations in plot.
/*
 int sm()
{
		VecDoub y(4);
		VecDoub dydx(4); //vector of positions & velocities for earth and
		VecDoub yout(4);


		double x;
		double xmin = 0;       //minimum starting position (units: au)
		double kmax = 50*87.969;  //max iterations (units: days)
		double h = 1;          //time step size (units: days)


		///Initial Conditions:

		//Mercury
		y[0] = 0.307491008;   //X-Position          (units: au)
		y[1] = 0;                      //X-Velocity (units: au/day)
		y[2] = 0;             //Y- Position         (units: au)
		y[3] = 0.0340638003; 		   //Y-Velocity (units: au/day)

		mercDerivs(xmin, y, dydx);

			//file output stream
			ofstream ofPositionMercury;
			ofPositionMercury.open("x-y-positionMercury.csv");


		for(int k=0; k < kmax; k++)
			{
					x=xmin+k*h;

					rk4(y, dydx,  x, h, yout, mercDerivs);

					//display output
					cout << "k = " << k
						 << "    Xm = " << yout[0] << "    X'm= " << yout[1]
						 << "    Ym = " << yout[2] << "    Y'm= " << yout[3] << endl;

					//file output stream
					ofPositionMercury << yout[0] << "," << yout[2] << endl;

					y = yout;

					mercDerivs(x,y,dydx);
			}

			//closes file output stream
			ofPositionMercury.close();

	return 0;
}
 */







/*
//Last Working w/ N.M.G. example.

void derivs(const Doub x, VecDoub_I & y, VecDoub_O & dydx)
{
	dydx[0]= y[1];
	dydx[1]= ( 11*exp((-1)*x) - 3*y[1] - 5*y[0] ) / 2;

}


int main (int argc, char * const argv[])
{
	VecDoub y(2),dydx(2);
	Doub x, xmin, xmax, kmax=1000, h=0.25;

	VecDoub yout(2);
	int k;

	xmin=0;
	//xmax=2; //appears to do nothing

	y[0]=7;
	y[1]=13;

	derivs(xmin,y,dydx);

	ofi.open("test.csv");
	ofi << "f(x+h),f'(x+h)" << endl;

	for(k=0;k<kmax;k++)
	{
		x=xmin+k*h;
		rk4(y, dydx,  x, h, yout, derivs);
		cout << "k = " << k << "    f(x+h) = " << yout[0] << "    f'(x+h) = " << yout[1] << endl;
		ofi << yout[0] << "," << yout[1] << endl;
		y[0]=yout[0];
		y[1]=yout[1];
		derivs(x,y,dydx);
	}

}
*/

